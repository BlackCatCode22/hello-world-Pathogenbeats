#include <vector>
#include <iostream>
#include <fstream>
#include <sstream>
#include <string>

/*
I decided to not use namespace std; since you told us it is more professional this way
and since I will be presenting my code I wanted to be as professional as possible.
*/

// Create and Group all the information under Animal
struct Animal {
    int age;
    std::string sex;
    std::string species;
    std::string color;
    int weight;
    int birthYear; // Added to calculate birth year
    std::string name; // Added information for name
};

// Hard-coded current year
const int CURRENT_YEAR = 2024; // Set current year to calculate birthdate based on age


// Create a vector for parsing names for animals
std::vector<std::string> loadAnimalNames(const std::string& filename) {
    std::vector<std::string> names;
    std::ifstream nameFile(filename);

    if (!nameFile.is_open()) {
        std::cerr << "Error opening names file!" << std::endl;
        return names;
    }

    std::string name;
    while (std::getline(nameFile, name)) {
        names.push_back(name);
    }

    nameFile.close();
    return names;
}


// Create a function that will take a parameter containing animal details and return an object.
Animal parseAnimalDetails(const std::string& line) {
    Animal animal;
    std::istringstream iss(line);

    // Extracting age
    std::string ageStr;
    iss >> ageStr; // e.g., "4"
    animal.age = std::stoi(ageStr);

    // Extracting sex
    std::string sexStr;
    iss >> sexStr; // e.g., "year"
    iss >> sexStr; // e.g., "old"
    iss >> animal.sex; // e.g., "female"

    // Extracting species
    std::string speciesStr;
    iss >> speciesStr; // e.g., "hyena,"
    animal.species = speciesStr.substr(0, speciesStr.size() - 1); // remove the comma

    // Calculate birth year
    animal.birthYear = CURRENT_YEAR - animal.age;

    // Skip to color
    std::string skip;
    std::getline(iss, skip, ','); // skip the part until "color"

    // Extracting color
    std::getline(iss, skip, ','); // read until "color"
    std::istringstream colorStream(skip);
    std::string colorLabel;
    colorStream >> colorLabel; // e.g., "tan"
    animal.color = colorLabel;

    // Extracting weight
    std::string weightStr;
    std::getline(iss, weightStr); // get the rest of the line for weight
    std::istringstream weightStream(weightStr);
    weightStream >> animal.weight; // e.g., "70"
    weightStream.ignore(6); // ignore "pounds"

    return animal;
}

int main() {
    std::ifstream file("C:/Users/patho/zookeeper'sChallenge/dataFiles/arrivingAnimals.txt");
    std::vector<Animal> animals;

    if (!file.is_open()) {
        std::cerr << "Error opening file!" << std::endl;
        return 1;
    }

    std::string line;
    while (std::getline(file, line)) {
        animals.push_back(parseAnimalDetails(line));
    }

    file.close();

    // Output the extracted details
    for (const auto& animal : animals) {
        std::cout << "Age: " << animal.age
            << ", Sex: " << animal.sex
            << ", Species: " << animal.species
            << ", Color: " << animal.color
            << ", Weight: " << animal.weight << " pounds"
            << ", Birth Year: " << animal.birthYear
            << std::endl;
    }

    return 0;
}
